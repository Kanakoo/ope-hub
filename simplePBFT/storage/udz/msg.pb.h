// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
class myPkg;
class myPkgDefaultTypeInternal;
extern myPkgDefaultTypeInternal _myPkg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::myPkg* Arena::CreateMaybeMessage<::myPkg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class myPkg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myPkg) */ {
 public:
  myPkg();
  virtual ~myPkg();

  myPkg(const myPkg& from);
  myPkg(myPkg&& from) noexcept
    : myPkg() {
    *this = ::std::move(from);
  }

  inline myPkg& operator=(const myPkg& from) {
    CopyFrom(from);
    return *this;
  }
  inline myPkg& operator=(myPkg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const myPkg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const myPkg* internal_default_instance() {
    return reinterpret_cast<const myPkg*>(
               &_myPkg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(myPkg& a, myPkg& b) {
    a.Swap(&b);
  }
  inline void Swap(myPkg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline myPkg* New() const final {
    return CreateMaybeMessage<myPkg>(nullptr);
  }

  myPkg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<myPkg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const myPkg& from);
  void MergeFrom(const myPkg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(myPkg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myPkg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLcipFieldNumber = 12,
    kRcipFieldNumber = 13,
    kLencFieldNumber = 14,
    kRencFieldNumber = 15,
    kAllcipFieldNumber = 16,
    kAllencFieldNumber = 17,
    kTmpFieldNumber = 4,
    kCipherFieldNumber = 5,
    kPathFieldNumber = 8,
    kMsgTypeFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kYFieldNumber = 6,
    kEncIdFieldNumber = 3,
    kVBefFieldNumber = 9,
    kRstFieldNumber = 7,
    kVUDZFieldNumber = 10,
    kMtdFieldNumber = 11,
  };
  // repeated string lcip = 12;
  int lcip_size() const;
  private:
  int _internal_lcip_size() const;
  public:
  void clear_lcip();
  const std::string& lcip(int index) const;
  std::string* mutable_lcip(int index);
  void set_lcip(int index, const std::string& value);
  void set_lcip(int index, std::string&& value);
  void set_lcip(int index, const char* value);
  void set_lcip(int index, const char* value, size_t size);
  std::string* add_lcip();
  void add_lcip(const std::string& value);
  void add_lcip(std::string&& value);
  void add_lcip(const char* value);
  void add_lcip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lcip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lcip();
  private:
  const std::string& _internal_lcip(int index) const;
  std::string* _internal_add_lcip();
  public:

  // repeated string rcip = 13;
  int rcip_size() const;
  private:
  int _internal_rcip_size() const;
  public:
  void clear_rcip();
  const std::string& rcip(int index) const;
  std::string* mutable_rcip(int index);
  void set_rcip(int index, const std::string& value);
  void set_rcip(int index, std::string&& value);
  void set_rcip(int index, const char* value);
  void set_rcip(int index, const char* value, size_t size);
  std::string* add_rcip();
  void add_rcip(const std::string& value);
  void add_rcip(std::string&& value);
  void add_rcip(const char* value);
  void add_rcip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rcip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rcip();
  private:
  const std::string& _internal_rcip(int index) const;
  std::string* _internal_add_rcip();
  public:

  // repeated int64 lenc = 14;
  int lenc_size() const;
  private:
  int _internal_lenc_size() const;
  public:
  void clear_lenc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lenc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_lenc() const;
  void _internal_add_lenc(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_lenc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 lenc(int index) const;
  void set_lenc(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_lenc(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      lenc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_lenc();

  // repeated int64 renc = 15;
  int renc_size() const;
  private:
  int _internal_renc_size() const;
  public:
  void clear_renc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_renc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_renc() const;
  void _internal_add_renc(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_renc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 renc(int index) const;
  void set_renc(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_renc(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      renc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_renc();

  // repeated string allcip = 16;
  int allcip_size() const;
  private:
  int _internal_allcip_size() const;
  public:
  void clear_allcip();
  const std::string& allcip(int index) const;
  std::string* mutable_allcip(int index);
  void set_allcip(int index, const std::string& value);
  void set_allcip(int index, std::string&& value);
  void set_allcip(int index, const char* value);
  void set_allcip(int index, const char* value, size_t size);
  std::string* add_allcip();
  void add_allcip(const std::string& value);
  void add_allcip(std::string&& value);
  void add_allcip(const char* value);
  void add_allcip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allcip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allcip();
  private:
  const std::string& _internal_allcip(int index) const;
  std::string* _internal_add_allcip();
  public:

  // repeated int64 allenc = 17;
  int allenc_size() const;
  private:
  int _internal_allenc_size() const;
  public:
  void clear_allenc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_allenc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_allenc() const;
  void _internal_add_allenc(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_allenc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 allenc(int index) const;
  void set_allenc(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_allenc(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      allenc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_allenc();

  // optional string tmp = 4;
  bool has_tmp() const;
  private:
  bool _internal_has_tmp() const;
  public:
  void clear_tmp();
  const std::string& tmp() const;
  void set_tmp(const std::string& value);
  void set_tmp(std::string&& value);
  void set_tmp(const char* value);
  void set_tmp(const char* value, size_t size);
  std::string* mutable_tmp();
  std::string* release_tmp();
  void set_allocated_tmp(std::string* tmp);
  private:
  const std::string& _internal_tmp() const;
  void _internal_set_tmp(const std::string& value);
  std::string* _internal_mutable_tmp();
  public:

  // optional string cipher = 5;
  bool has_cipher() const;
  private:
  bool _internal_has_cipher() const;
  public:
  void clear_cipher();
  const std::string& cipher() const;
  void set_cipher(const std::string& value);
  void set_cipher(std::string&& value);
  void set_cipher(const char* value);
  void set_cipher(const char* value, size_t size);
  std::string* mutable_cipher();
  std::string* release_cipher();
  void set_allocated_cipher(std::string* cipher);
  private:
  const std::string& _internal_cipher() const;
  void _internal_set_cipher(const std::string& value);
  std::string* _internal_mutable_cipher();
  public:

  // optional string path = 8;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required int32 msgType = 1;
  bool has_msgtype() const;
  private:
  bool _internal_has_msgtype() const;
  public:
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 msgId = 2;
  bool has_msgid() const;
  private:
  bool _internal_has_msgid() const;
  public:
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int64 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 encId = 3;
  bool has_encid() const;
  private:
  bool _internal_has_encid() const;
  public:
  void clear_encid();
  ::PROTOBUF_NAMESPACE_ID::int32 encid() const;
  void set_encid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_encid() const;
  void _internal_set_encid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 vBef = 9;
  bool has_vbef() const;
  private:
  bool _internal_has_vbef() const;
  public:
  void clear_vbef();
  ::PROTOBUF_NAMESPACE_ID::int32 vbef() const;
  void set_vbef(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vbef() const;
  void _internal_set_vbef(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 rst = 7;
  bool has_rst() const;
  private:
  bool _internal_has_rst() const;
  public:
  void clear_rst();
  ::PROTOBUF_NAMESPACE_ID::int64 rst() const;
  void set_rst(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rst() const;
  void _internal_set_rst(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 vUDZ = 10;
  bool has_vudz() const;
  private:
  bool _internal_has_vudz() const;
  public:
  void clear_vudz();
  ::PROTOBUF_NAMESPACE_ID::int32 vudz() const;
  void set_vudz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vudz() const;
  void _internal_set_vudz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool mtd = 11;
  bool has_mtd() const;
  private:
  bool _internal_has_mtd() const;
  public:
  void clear_mtd();
  bool mtd() const;
  void set_mtd(bool value);
  private:
  bool _internal_mtd() const;
  void _internal_set_mtd(bool value);
  public:

  // @@protoc_insertion_point(class_scope:myPkg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lcip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rcip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > lenc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > renc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allcip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > allenc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tmp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cipher_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  ::PROTOBUF_NAMESPACE_ID::int64 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 encid_;
  ::PROTOBUF_NAMESPACE_ID::int32 vbef_;
  ::PROTOBUF_NAMESPACE_ID::int64 rst_;
  ::PROTOBUF_NAMESPACE_ID::int32 vudz_;
  bool mtd_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// myPkg

// required int32 msgType = 1;
inline bool myPkg::_internal_has_msgtype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool myPkg::has_msgtype() const {
  return _internal_has_msgtype();
}
inline void myPkg::clear_msgtype() {
  msgtype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::msgtype() const {
  // @@protoc_insertion_point(field_get:myPkg.msgType)
  return _internal_msgtype();
}
inline void myPkg::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  msgtype_ = value;
}
inline void myPkg::set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:myPkg.msgType)
}

// optional int32 msgId = 2;
inline bool myPkg::_internal_has_msgid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool myPkg::has_msgid() const {
  return _internal_has_msgid();
}
inline void myPkg::clear_msgid() {
  msgid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::msgid() const {
  // @@protoc_insertion_point(field_get:myPkg.msgId)
  return _internal_msgid();
}
inline void myPkg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  msgid_ = value;
}
inline void myPkg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:myPkg.msgId)
}

// optional int32 encId = 3;
inline bool myPkg::_internal_has_encid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool myPkg::has_encid() const {
  return _internal_has_encid();
}
inline void myPkg::clear_encid() {
  encid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::_internal_encid() const {
  return encid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::encid() const {
  // @@protoc_insertion_point(field_get:myPkg.encId)
  return _internal_encid();
}
inline void myPkg::_internal_set_encid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  encid_ = value;
}
inline void myPkg::set_encid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_encid(value);
  // @@protoc_insertion_point(field_set:myPkg.encId)
}

// optional string tmp = 4;
inline bool myPkg::_internal_has_tmp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool myPkg::has_tmp() const {
  return _internal_has_tmp();
}
inline void myPkg::clear_tmp() {
  tmp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& myPkg::tmp() const {
  // @@protoc_insertion_point(field_get:myPkg.tmp)
  return _internal_tmp();
}
inline void myPkg::set_tmp(const std::string& value) {
  _internal_set_tmp(value);
  // @@protoc_insertion_point(field_set:myPkg.tmp)
}
inline std::string* myPkg::mutable_tmp() {
  // @@protoc_insertion_point(field_mutable:myPkg.tmp)
  return _internal_mutable_tmp();
}
inline const std::string& myPkg::_internal_tmp() const {
  return tmp_.GetNoArena();
}
inline void myPkg::_internal_set_tmp(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tmp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void myPkg::set_tmp(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tmp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myPkg.tmp)
}
inline void myPkg::set_tmp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tmp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myPkg.tmp)
}
inline void myPkg::set_tmp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tmp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myPkg.tmp)
}
inline std::string* myPkg::_internal_mutable_tmp() {
  _has_bits_[0] |= 0x00000001u;
  return tmp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* myPkg::release_tmp() {
  // @@protoc_insertion_point(field_release:myPkg.tmp)
  if (!_internal_has_tmp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tmp_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void myPkg::set_allocated_tmp(std::string* tmp) {
  if (tmp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tmp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tmp);
  // @@protoc_insertion_point(field_set_allocated:myPkg.tmp)
}

// optional string cipher = 5;
inline bool myPkg::_internal_has_cipher() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool myPkg::has_cipher() const {
  return _internal_has_cipher();
}
inline void myPkg::clear_cipher() {
  cipher_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& myPkg::cipher() const {
  // @@protoc_insertion_point(field_get:myPkg.cipher)
  return _internal_cipher();
}
inline void myPkg::set_cipher(const std::string& value) {
  _internal_set_cipher(value);
  // @@protoc_insertion_point(field_set:myPkg.cipher)
}
inline std::string* myPkg::mutable_cipher() {
  // @@protoc_insertion_point(field_mutable:myPkg.cipher)
  return _internal_mutable_cipher();
}
inline const std::string& myPkg::_internal_cipher() const {
  return cipher_.GetNoArena();
}
inline void myPkg::_internal_set_cipher(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cipher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void myPkg::set_cipher(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cipher_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myPkg.cipher)
}
inline void myPkg::set_cipher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cipher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myPkg.cipher)
}
inline void myPkg::set_cipher(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cipher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myPkg.cipher)
}
inline std::string* myPkg::_internal_mutable_cipher() {
  _has_bits_[0] |= 0x00000002u;
  return cipher_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* myPkg::release_cipher() {
  // @@protoc_insertion_point(field_release:myPkg.cipher)
  if (!_internal_has_cipher()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cipher_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void myPkg::set_allocated_cipher(std::string* cipher) {
  if (cipher != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cipher_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cipher);
  // @@protoc_insertion_point(field_set_allocated:myPkg.cipher)
}

// optional int64 y = 6;
inline bool myPkg::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool myPkg::has_y() const {
  return _internal_has_y();
}
inline void myPkg::clear_y() {
  y_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::y() const {
  // @@protoc_insertion_point(field_get:myPkg.y)
  return _internal_y();
}
inline void myPkg::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  y_ = value;
}
inline void myPkg::set_y(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:myPkg.y)
}

// optional int64 rst = 7;
inline bool myPkg::_internal_has_rst() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool myPkg::has_rst() const {
  return _internal_has_rst();
}
inline void myPkg::clear_rst() {
  rst_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::_internal_rst() const {
  return rst_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::rst() const {
  // @@protoc_insertion_point(field_get:myPkg.rst)
  return _internal_rst();
}
inline void myPkg::_internal_set_rst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  rst_ = value;
}
inline void myPkg::set_rst(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rst(value);
  // @@protoc_insertion_point(field_set:myPkg.rst)
}

// optional string path = 8;
inline bool myPkg::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool myPkg::has_path() const {
  return _internal_has_path();
}
inline void myPkg::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& myPkg::path() const {
  // @@protoc_insertion_point(field_get:myPkg.path)
  return _internal_path();
}
inline void myPkg::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:myPkg.path)
}
inline std::string* myPkg::mutable_path() {
  // @@protoc_insertion_point(field_mutable:myPkg.path)
  return _internal_mutable_path();
}
inline const std::string& myPkg::_internal_path() const {
  return path_.GetNoArena();
}
inline void myPkg::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void myPkg::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myPkg.path)
}
inline void myPkg::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myPkg.path)
}
inline void myPkg::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myPkg.path)
}
inline std::string* myPkg::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000004u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* myPkg::release_path() {
  // @@protoc_insertion_point(field_release:myPkg.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void myPkg::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:myPkg.path)
}

// optional int32 vBef = 9;
inline bool myPkg::_internal_has_vbef() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool myPkg::has_vbef() const {
  return _internal_has_vbef();
}
inline void myPkg::clear_vbef() {
  vbef_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::_internal_vbef() const {
  return vbef_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::vbef() const {
  // @@protoc_insertion_point(field_get:myPkg.vBef)
  return _internal_vbef();
}
inline void myPkg::_internal_set_vbef(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  vbef_ = value;
}
inline void myPkg::set_vbef(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vbef(value);
  // @@protoc_insertion_point(field_set:myPkg.vBef)
}

// optional int32 vUDZ = 10;
inline bool myPkg::_internal_has_vudz() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool myPkg::has_vudz() const {
  return _internal_has_vudz();
}
inline void myPkg::clear_vudz() {
  vudz_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::_internal_vudz() const {
  return vudz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 myPkg::vudz() const {
  // @@protoc_insertion_point(field_get:myPkg.vUDZ)
  return _internal_vudz();
}
inline void myPkg::_internal_set_vudz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  vudz_ = value;
}
inline void myPkg::set_vudz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vudz(value);
  // @@protoc_insertion_point(field_set:myPkg.vUDZ)
}

// optional bool mtd = 11;
inline bool myPkg::_internal_has_mtd() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool myPkg::has_mtd() const {
  return _internal_has_mtd();
}
inline void myPkg::clear_mtd() {
  mtd_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool myPkg::_internal_mtd() const {
  return mtd_;
}
inline bool myPkg::mtd() const {
  // @@protoc_insertion_point(field_get:myPkg.mtd)
  return _internal_mtd();
}
inline void myPkg::_internal_set_mtd(bool value) {
  _has_bits_[0] |= 0x00000400u;
  mtd_ = value;
}
inline void myPkg::set_mtd(bool value) {
  _internal_set_mtd(value);
  // @@protoc_insertion_point(field_set:myPkg.mtd)
}

// repeated string lcip = 12;
inline int myPkg::_internal_lcip_size() const {
  return lcip_.size();
}
inline int myPkg::lcip_size() const {
  return _internal_lcip_size();
}
inline void myPkg::clear_lcip() {
  lcip_.Clear();
}
inline std::string* myPkg::add_lcip() {
  // @@protoc_insertion_point(field_add_mutable:myPkg.lcip)
  return _internal_add_lcip();
}
inline const std::string& myPkg::_internal_lcip(int index) const {
  return lcip_.Get(index);
}
inline const std::string& myPkg::lcip(int index) const {
  // @@protoc_insertion_point(field_get:myPkg.lcip)
  return _internal_lcip(index);
}
inline std::string* myPkg::mutable_lcip(int index) {
  // @@protoc_insertion_point(field_mutable:myPkg.lcip)
  return lcip_.Mutable(index);
}
inline void myPkg::set_lcip(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:myPkg.lcip)
  lcip_.Mutable(index)->assign(value);
}
inline void myPkg::set_lcip(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:myPkg.lcip)
  lcip_.Mutable(index)->assign(std::move(value));
}
inline void myPkg::set_lcip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lcip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myPkg.lcip)
}
inline void myPkg::set_lcip(int index, const char* value, size_t size) {
  lcip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myPkg.lcip)
}
inline std::string* myPkg::_internal_add_lcip() {
  return lcip_.Add();
}
inline void myPkg::add_lcip(const std::string& value) {
  lcip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myPkg.lcip)
}
inline void myPkg::add_lcip(std::string&& value) {
  lcip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myPkg.lcip)
}
inline void myPkg::add_lcip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lcip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myPkg.lcip)
}
inline void myPkg::add_lcip(const char* value, size_t size) {
  lcip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myPkg.lcip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
myPkg::lcip() const {
  // @@protoc_insertion_point(field_list:myPkg.lcip)
  return lcip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
myPkg::mutable_lcip() {
  // @@protoc_insertion_point(field_mutable_list:myPkg.lcip)
  return &lcip_;
}

// repeated string rcip = 13;
inline int myPkg::_internal_rcip_size() const {
  return rcip_.size();
}
inline int myPkg::rcip_size() const {
  return _internal_rcip_size();
}
inline void myPkg::clear_rcip() {
  rcip_.Clear();
}
inline std::string* myPkg::add_rcip() {
  // @@protoc_insertion_point(field_add_mutable:myPkg.rcip)
  return _internal_add_rcip();
}
inline const std::string& myPkg::_internal_rcip(int index) const {
  return rcip_.Get(index);
}
inline const std::string& myPkg::rcip(int index) const {
  // @@protoc_insertion_point(field_get:myPkg.rcip)
  return _internal_rcip(index);
}
inline std::string* myPkg::mutable_rcip(int index) {
  // @@protoc_insertion_point(field_mutable:myPkg.rcip)
  return rcip_.Mutable(index);
}
inline void myPkg::set_rcip(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:myPkg.rcip)
  rcip_.Mutable(index)->assign(value);
}
inline void myPkg::set_rcip(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:myPkg.rcip)
  rcip_.Mutable(index)->assign(std::move(value));
}
inline void myPkg::set_rcip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rcip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myPkg.rcip)
}
inline void myPkg::set_rcip(int index, const char* value, size_t size) {
  rcip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myPkg.rcip)
}
inline std::string* myPkg::_internal_add_rcip() {
  return rcip_.Add();
}
inline void myPkg::add_rcip(const std::string& value) {
  rcip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myPkg.rcip)
}
inline void myPkg::add_rcip(std::string&& value) {
  rcip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myPkg.rcip)
}
inline void myPkg::add_rcip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rcip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myPkg.rcip)
}
inline void myPkg::add_rcip(const char* value, size_t size) {
  rcip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myPkg.rcip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
myPkg::rcip() const {
  // @@protoc_insertion_point(field_list:myPkg.rcip)
  return rcip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
myPkg::mutable_rcip() {
  // @@protoc_insertion_point(field_mutable_list:myPkg.rcip)
  return &rcip_;
}

// repeated int64 lenc = 14;
inline int myPkg::_internal_lenc_size() const {
  return lenc_.size();
}
inline int myPkg::lenc_size() const {
  return _internal_lenc_size();
}
inline void myPkg::clear_lenc() {
  lenc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::_internal_lenc(int index) const {
  return lenc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::lenc(int index) const {
  // @@protoc_insertion_point(field_get:myPkg.lenc)
  return _internal_lenc(index);
}
inline void myPkg::set_lenc(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  lenc_.Set(index, value);
  // @@protoc_insertion_point(field_set:myPkg.lenc)
}
inline void myPkg::_internal_add_lenc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  lenc_.Add(value);
}
inline void myPkg::add_lenc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_lenc(value);
  // @@protoc_insertion_point(field_add:myPkg.lenc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
myPkg::_internal_lenc() const {
  return lenc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
myPkg::lenc() const {
  // @@protoc_insertion_point(field_list:myPkg.lenc)
  return _internal_lenc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
myPkg::_internal_mutable_lenc() {
  return &lenc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
myPkg::mutable_lenc() {
  // @@protoc_insertion_point(field_mutable_list:myPkg.lenc)
  return _internal_mutable_lenc();
}

// repeated int64 renc = 15;
inline int myPkg::_internal_renc_size() const {
  return renc_.size();
}
inline int myPkg::renc_size() const {
  return _internal_renc_size();
}
inline void myPkg::clear_renc() {
  renc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::_internal_renc(int index) const {
  return renc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::renc(int index) const {
  // @@protoc_insertion_point(field_get:myPkg.renc)
  return _internal_renc(index);
}
inline void myPkg::set_renc(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  renc_.Set(index, value);
  // @@protoc_insertion_point(field_set:myPkg.renc)
}
inline void myPkg::_internal_add_renc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  renc_.Add(value);
}
inline void myPkg::add_renc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_renc(value);
  // @@protoc_insertion_point(field_add:myPkg.renc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
myPkg::_internal_renc() const {
  return renc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
myPkg::renc() const {
  // @@protoc_insertion_point(field_list:myPkg.renc)
  return _internal_renc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
myPkg::_internal_mutable_renc() {
  return &renc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
myPkg::mutable_renc() {
  // @@protoc_insertion_point(field_mutable_list:myPkg.renc)
  return _internal_mutable_renc();
}

// repeated string allcip = 16;
inline int myPkg::_internal_allcip_size() const {
  return allcip_.size();
}
inline int myPkg::allcip_size() const {
  return _internal_allcip_size();
}
inline void myPkg::clear_allcip() {
  allcip_.Clear();
}
inline std::string* myPkg::add_allcip() {
  // @@protoc_insertion_point(field_add_mutable:myPkg.allcip)
  return _internal_add_allcip();
}
inline const std::string& myPkg::_internal_allcip(int index) const {
  return allcip_.Get(index);
}
inline const std::string& myPkg::allcip(int index) const {
  // @@protoc_insertion_point(field_get:myPkg.allcip)
  return _internal_allcip(index);
}
inline std::string* myPkg::mutable_allcip(int index) {
  // @@protoc_insertion_point(field_mutable:myPkg.allcip)
  return allcip_.Mutable(index);
}
inline void myPkg::set_allcip(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:myPkg.allcip)
  allcip_.Mutable(index)->assign(value);
}
inline void myPkg::set_allcip(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:myPkg.allcip)
  allcip_.Mutable(index)->assign(std::move(value));
}
inline void myPkg::set_allcip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allcip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myPkg.allcip)
}
inline void myPkg::set_allcip(int index, const char* value, size_t size) {
  allcip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myPkg.allcip)
}
inline std::string* myPkg::_internal_add_allcip() {
  return allcip_.Add();
}
inline void myPkg::add_allcip(const std::string& value) {
  allcip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myPkg.allcip)
}
inline void myPkg::add_allcip(std::string&& value) {
  allcip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myPkg.allcip)
}
inline void myPkg::add_allcip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allcip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myPkg.allcip)
}
inline void myPkg::add_allcip(const char* value, size_t size) {
  allcip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myPkg.allcip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
myPkg::allcip() const {
  // @@protoc_insertion_point(field_list:myPkg.allcip)
  return allcip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
myPkg::mutable_allcip() {
  // @@protoc_insertion_point(field_mutable_list:myPkg.allcip)
  return &allcip_;
}

// repeated int64 allenc = 17;
inline int myPkg::_internal_allenc_size() const {
  return allenc_.size();
}
inline int myPkg::allenc_size() const {
  return _internal_allenc_size();
}
inline void myPkg::clear_allenc() {
  allenc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::_internal_allenc(int index) const {
  return allenc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 myPkg::allenc(int index) const {
  // @@protoc_insertion_point(field_get:myPkg.allenc)
  return _internal_allenc(index);
}
inline void myPkg::set_allenc(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  allenc_.Set(index, value);
  // @@protoc_insertion_point(field_set:myPkg.allenc)
}
inline void myPkg::_internal_add_allenc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  allenc_.Add(value);
}
inline void myPkg::add_allenc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_allenc(value);
  // @@protoc_insertion_point(field_add:myPkg.allenc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
myPkg::_internal_allenc() const {
  return allenc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
myPkg::allenc() const {
  // @@protoc_insertion_point(field_list:myPkg.allenc)
  return _internal_allenc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
myPkg::_internal_mutable_allenc() {
  return &allenc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
myPkg::mutable_allenc() {
  // @@protoc_insertion_point(field_mutable_list:myPkg.allenc)
  return _internal_mutable_allenc();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
